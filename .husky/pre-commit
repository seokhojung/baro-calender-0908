#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🚨 Running Pre-commit Quality Gates..."
echo "======================================"

# 1. Git Conflict Check
echo "1️⃣ Checking for Git conflicts..."
CONFLICTS=$(git diff --cached --name-only | xargs grep -l "<<<<<<< HEAD\|=======" 2>/dev/null || true)

if [ ! -z "$CONFLICTS" ]; then
  echo "❌ Git conflicts detected in:"
  echo "$CONFLICTS" | while read file; do
    echo "   - $file"
  done
  echo ""
  echo "⚠️  Please resolve conflicts before committing."
  exit 1
else
  echo "✅ No Git conflicts found"
fi

# 2. API Contract Validation
echo "2️⃣ Validating API contracts..."
API_FILES=$(git diff --cached --name-only | grep -E "src/api/.*\.js$" || true)

if [ ! -z "$API_FILES" ]; then
  echo "   Checking modified API files:"
  for file in $API_FILES; do
    echo "   - $file"
    
    # Check for required middleware
    if ! grep -q "ACLMiddleware" "$file"; then
      echo "   ⚠️  Warning: $file missing ACL middleware"
    fi
    
    # Check for schema validation
    if ! grep -q "schema:" "$file"; then
      echo "   ⚠️  Warning: $file missing schema validation"
    fi
  done
  echo "✅ API contract check complete"
else
  echo "✅ No API changes to validate"
fi

# 3. Database Migration Check
echo "3️⃣ Checking database migrations..."
MIGRATION_FILES=$(git diff --cached --name-only | grep -E "migrations/.*\.js$" || true)

if [ ! -z "$MIGRATION_FILES" ]; then
  echo "   Validating migration files:"
  for file in $MIGRATION_FILES; do
    echo "   - $file"
    
    # Check for up() and rollback() functions
    if ! grep -q "async function up()" "$file"; then
      echo "❌ Error: $file missing up() function"
      exit 1
    fi
    
    if ! grep -q "async function rollback()" "$file"; then
      echo "❌ Error: $file missing rollback() function"
      exit 1
    fi
  done
  echo "✅ Migration structure valid"
else
  echo "✅ No migration changes"
fi

# 4. TypeScript Type Check (Frontend)
echo "4️⃣ Checking TypeScript types..."
TS_FILES=$(git diff --cached --name-only | grep -E "\.(ts|tsx)$" || true)

if [ ! -z "$TS_FILES" ]; then
  if [ -f "tsconfig.json" ]; then
    npx tsc --noEmit 2>/dev/null
    if [ $? -eq 0 ]; then
      echo "✅ TypeScript compilation successful"
    else
      echo "❌ TypeScript compilation failed"
      echo "   Run 'npx tsc --noEmit' to see errors"
      exit 1
    fi
  fi
else
  echo "✅ No TypeScript changes"
fi

# 5. Breaking Change Detection
echo "5️⃣ Detecting breaking changes..."
BREAKING_PATTERNS="BREAKING CHANGE\|removed\|deleted\|deprecated"
BREAKING=$(git diff --cached | grep -i "$BREAKING_PATTERNS" || true)

if [ ! -z "$BREAKING" ]; then
  echo "⚠️  Potential breaking changes detected!"
  echo "   Please ensure:"
  echo "   - [ ] Frontend team is notified"
  echo "   - [ ] API version is bumped if needed"
  echo "   - [ ] Migration guide is provided"
  read -p "   Continue anyway? (y/N): " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
  fi
fi

echo ""
echo "======================================"
echo "✅ All pre-commit checks passed!"
echo "======================================"

# Run existing pre-commit hooks if any
npm run lint 2>/dev/null || true

# Living Documentation 동기화
echo "6️⃣ Living Documentation 동기화..."
if [ -f "docs/implementation-verification/automation-tools/pre-commit-doc-sync.js" ]; then
  node docs/implementation-verification/automation-tools/pre-commit-doc-sync.js
else
  echo "⚠️ Living Documentation 스크립트를 찾을 수 없습니다."
fi